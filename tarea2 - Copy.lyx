#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language spanish-mexico
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Tarea #2: Transformaciones de intesidad
\end_layout

\begin_layout Author
Dan Williams Robledo Cruz
\end_layout

\begin_layout Date
07 de octubre del 2013
\end_layout

\begin_layout Address
Procesamiento Digital de Imágenes
\end_layout

\begin_layout Right Address
Cinvestav
\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
El principal objetivo de las tecnicas de mejoramiento es el proceso de manipulac
ion de una imagen para que resulte mas util que la imagen original para
 una aplicacion determinada.
\end_layout

\begin_layout Standard
El mejoramiento de imagenes puede efectuarse en el dominio espacial o en
 el dominio de la frecuencia.
\end_layout

\begin_layout Standard
La presente practica se veran metodos en el dominio espacial, el cual se
 refiere al conjunto de pixeles que componen la imagen y las tecnicas operan
 directamente sobre ellos.
\end_layout

\begin_layout Section
Desarrollo
\end_layout

\begin_layout Subsection
Descripción de la practica
\end_layout

\begin_layout Subsubsection
Implementar en Matlab que compute las transformaciones de intensidad: lineal,
 negativo, comprension logaritmica, gamma y normalizacion.
\end_layout

\begin_layout Enumerate
La imagen tendra tres argumentos de entrada: la imagen en escala de grises,
 una cadena de caracteres que indique el procedimiento a realizar y los
 valores de la trasformacion.
\end_layout

\begin_layout Enumerate
La salida sera la imagen trasformada dependiendo del caso seleccionado.
\end_layout

\begin_layout Subsection
Lineal
\end_layout

\begin_layout Standard
La teoría de Fourier muestra como todas las funciones reales pueden ser
 representadas en forma de sinusoidales.
\end_layout

\begin_layout Standard
En aplicaciones reales la mayor parte de las señales no son periódicas y debemos
 transformar nuestras  series de Fourier para poder analizarlas, en el caso
 de las imágenes las señales corresponden a los niveles de gris e intensidad
 de las diferentes filas y columnas de la matriz.
 Se puede representar como una suma de exponenciales complejas de distintas
 amplitudes, frecuencias y fases.
 
\end_layout

\begin_layout Standard
Dada una imagen de dimensiones MxN, se define su transformada discreta de
 Fourier (DFT-2D) 
\begin_inset Formula $figura1.$
\end_inset

 y su inversa 
\begin_inset Formula $figura2$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename f_uno.PNG
	scale 35

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Formula para calcular la DFT 2D
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename f_dos.PNG
	scale 35

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Inversa de la DFT 2D
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Gracias a la propiedad de la separabilidad de la DFT 2D, se expresa de forma
 separada F(u,v) y f(x,y) y obtenerla en dos pasos aplicando sucesivamente
 la DFT 1D o su inversa.
\end_layout

\begin_layout Standard
La F(u,v) se obtiene aplicando primero a cada columna de f(x,y) y después
 aplicándola a cada fila de f(x,y).
 De forma inversa para obtener f(x,y) se transforma primero las filas y
 luego las columnas.
\end_layout

\begin_layout Subsubsection
Programa de la función de la DFT 2D
\end_layout

\begin_layout Standard
Se le pasa la matriz de la imagen a la función "dft2", primero se traslada
 el centro de la imagen, después manda en vectores filas todas las columnas
 de la matriz a la función "dft" para poder aplicar la DFT 1D, luego comienza
 a mandar las filas para aplicarle el mismo proceso de la DFT 1D, al final
 regresa el espectro de frecuencia.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\lang english
\begin_inset listings
lstparams "basicstyle={\small},breaklines=true,language=Matlab,numbers=left,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

function img=dft2(img)     
\end_layout

\begin_layout Plain Layout

[Y,X]=size(img);     
\end_layout

\begin_layout Plain Layout

N1=X/2;     
\end_layout

\begin_layout Plain Layout

N2=Y/2;     
\end_layout

\begin_layout Plain Layout

W=1j*2*pi;     
\end_layout

\begin_layout Plain Layout

for x=1:Y                            
\end_layout

\begin_layout Plain Layout

	img(x,:)=img(x,:).*exp(((W.*(((1:X).*N1)/X+(x*N2/Y)))));          
\end_layout

\begin_layout Plain Layout

end     
\end_layout

\begin_layout Plain Layout

img=img.';                              
\end_layout

\begin_layout Plain Layout

for x=1:X      
\end_layout

\begin_layout Plain Layout

	img(x,:)=dft(img(x,:));                   
\end_layout

\begin_layout Plain Layout

end     
\end_layout

\begin_layout Plain Layout

img=img.';                                
\end_layout

\begin_layout Plain Layout

for x=1:Y        
\end_layout

\begin_layout Plain Layout

	img(x,:)=dft(img(x,:));                 
\end_layout

\begin_layout Plain Layout

end       
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Se aplica la DFT 1D multiplicando el vector por la exponencial compleja.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small},breaklines=true,language=Matlab,numbers=left,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

function Y=dft(img)
\end_layout

\begin_layout Plain Layout

N=length(img); 
\end_layout

\begin_layout Plain Layout

g=(0:N-1); 
\end_layout

\begin_layout Plain Layout

W=1i*2*pi;     
\end_layout

\begin_layout Plain Layout

for k=0:N-1         
\end_layout

\begin_layout Plain Layout

	Y(k+1)=sum(img.*(exp(-1*((W.*g.*k)/N))));       
\end_layout

\begin_layout Plain Layout

end
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para la inversa se le pasa la matriz previamente procesada por la función
 "dft2" y se empieza enviando las filas de la matriz a la función "idft",
 la cual le aplica la inversa de la DFT multiplicando el vector por una
 exponencial compleja positiva y multiplicándola por 
\begin_inset Formula $\frac{1}{N}$
\end_inset

 donde N es el tamaño del vector.
 Después de terminar con las filas empieza a enviar por columnas a la función
 "idft", y así poder terminar con la inversa y regresar la imagen original.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small},language=Matlab,numbers=left"
inline false
status open

\begin_layout Plain Layout

function img=idft2(img)     
\end_layout

\begin_layout Plain Layout

	[Y,X]=size(img);
\end_layout

\begin_layout Plain Layout

	for x=1:Y        
\end_layout

\begin_layout Plain Layout

		img(x,:)=idft(img(x,:));           
\end_layout

\begin_layout Plain Layout

	end          
\end_layout

\begin_layout Plain Layout

	img=img.';                     
\end_layout

\begin_layout Plain Layout

	for x=1:X          
\end_layout

\begin_layout Plain Layout

		img(x,:)=idft(img(x,:));       
\end_layout

\begin_layout Plain Layout

	end     
\end_layout

\begin_layout Plain Layout

	img=img.'; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

function Y=idft(img)
\end_layout

\begin_layout Plain Layout

	N=length(img); 
\end_layout

\begin_layout Plain Layout

	g=(0:N-1); W=1i*2*pi;     
\end_layout

\begin_layout Plain Layout

	for k=0:N-1         
\end_layout

\begin_layout Plain Layout

		Y(k+1)=(1/N)*(sum(img.*(exp((W*k.*g)/N)))); 
\end_layout

\begin_layout Plain Layout

	end
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Debido a que el rango dinámico del espectro de Fourier es generalmente mucho
 mayor de lo que los sistemas de visualización son capaces de reproducir,
 es habitual visualizar |F (u,v)| como:
\end_layout

\begin_layout Standard
\align center
D(u,v)=c log(1+F(u,v))
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small},breaklines=true,language=Matlab,numbers=left,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

	m_dft2=(log(1+abs(m_dft2)));                        
\end_layout

\begin_layout Plain Layout

	figure('Name','Practica 4');         
\end_layout

\begin_layout Plain Layout

	subplot(2,2,1:2); 
\end_layout

\begin_layout Plain Layout

	imshow(Isalida,[]);          
\end_layout

\begin_layout Plain Layout

	title('Imagen original')         
\end_layout

\begin_layout Plain Layout

	subplot(2,2,3); imshow(m_dft2,[]);          
\end_layout

\begin_layout Plain Layout

	title('Espectro de frecuencias de la DFT')          
\end_layout

\begin_layout Plain Layout

	subplot(2,2,4); 
\end_layout

\begin_layout Plain Layout

	imshow( m_idft2,[]);       
\end_layout

\begin_layout Plain Layout

	title('Inversa de la DFT') 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Captura de pantalla 2013-10-07 a la(s) 19.24.36.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Ejemplo de la DFT 2D
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
FFT
\end_layout

\begin_layout Standard
Los algoritmos FFT (Fast Fourier Transform) son métodos de cálculo que reducen
 el tiempo de computación de la DFT.
\end_layout

\begin_layout Standard
La técnica más importante y popularizada es la de J.
 W.
 Cooley – John Tukey (1915-2000) basada en romper la transformada en transformad
as más pequeñas y luego combinarlas para obtener la transformada total (1965).
 El método es el proceso de decimación en el tiempo y en frecuencia
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Decimación en frecuencia.
\end_layout

\begin_layout Standard
Divide la secuencia de salida en dos ecuaciones, una de índices pares y
 otra impares.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename f_cuatro.PNG
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Formula de FFT Decimación de Frecuencia
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename f_tres.PNG
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Ejemplo para una señal de tamaño N= 8
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Se lee la imagen a procesar, se llama la función "checkpow2" comprueba que
 la imagen sea 2
\begin_inset Formula $^{n}$
\end_inset

 sino rellena de ceros los espacios faltantes.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[Isalida,flag]=readbmp(i1);
\end_layout

\begin_layout Plain Layout

[Y,X]=size(Isalida);        
\end_layout

\begin_layout Plain Layout

Isalida=double(Isalida);                
\end_layout

\begin_layout Plain Layout

Img_pd=checkpow2(Isalida);   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

function temp=checkpow2(g)    
\end_layout

\begin_layout Plain Layout

[y,x]=size(g);                    
\end_layout

\begin_layout Plain Layout

px=2^ceil(log2(x));          
\end_layout

\begin_layout Plain Layout

py=2^ceil(log2(y)); 
\end_layout

\begin_layout Plain Layout

temp=zeros(py, px);        
\end_layout

\begin_layout Plain Layout

temp((1:y),(1:x))=g;    
\end_layout

\begin_layout Plain Layout

     
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Se le pasa la matriz de la imagen a la función "fft2_dit", primero se traslada
 el centro de la imagen, después manda en vectores filas todas las columnas
 de la matriz a la función "fft_dit" para poder aplicar la FFT 1D, se aplica
 el algoritmo de ordenamiento de inversión de bits; luego comienza a mandar
 las filas para aplicarle el mismo proceso de la FFT 1D y Se aplica el algoritmo
 de ordenamiento de inversión de bits, al final regresa el espectro de frecuenci
a.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small},breaklines=true,language=Matlab,numbers=left,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

function img=fft2_dit(img)     
\end_layout

\begin_layout Plain Layout

[Y,X]=size(img);
\end_layout

\begin_layout Plain Layout

N1=X/2;     
\end_layout

\begin_layout Plain Layout

N2=Y/2;     
\end_layout

\begin_layout Plain Layout

W=1j*2*pi;     
\end_layout

\begin_layout Plain Layout

for x=1:Y         
\end_layout

\begin_layout Plain Layout

	img(x,:)=img(x,:).*exp(((W.*(((1:X).*N1)/X+(x*N2/Y)))));   
\end_layout

\begin_layout Plain Layout

end         
\end_layout

\begin_layout Plain Layout

img=img.';                              
\end_layout

\begin_layout Plain Layout

for x=1:X      
\end_layout

\begin_layout Plain Layout

	img(x,:)=fft_dit(img(x,:));            
\end_layout

\begin_layout Plain Layout

	img(x,:)=bitreversal(img(x,:));     
\end_layout

\begin_layout Plain Layout

end     
\end_layout

\begin_layout Plain Layout

img=img.';                             
\end_layout

\begin_layout Plain Layout

for x=1:Y        
\end_layout

\begin_layout Plain Layout

	img(x,:)=fft_dit(img(x,:));         
\end_layout

\begin_layout Plain Layout

	img(x,:)=bitreversal(img(x,:));     
\end_layout

\begin_layout Plain Layout

end
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aplicación del algoritmo de Decimación en frecuencia de base-2, se obtiene
 realizado con las suma y la diferencia entre la primera y segunda mitades
 de la secuencia de entrada.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small},breaklines=true,language=Matlab,numbers=left,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

function g=fft_dit(g)
\end_layout

\begin_layout Plain Layout

N=length(g);  
\end_layout

\begin_layout Plain Layout

dx=log2(N);  
\end_layout

\begin_layout Plain Layout

delta=2^(dx-1); 
\end_layout

\begin_layout Plain Layout

for pass=1:dx      
\end_layout

\begin_layout Plain Layout

	w=exp(-1*((1i*2*pi)/(2*delta)));      
\end_layout

\begin_layout Plain Layout

	for b=0:delta-1         
\end_layout

\begin_layout Plain Layout

		for a=0:2*delta:N-1          
\end_layout

\begin_layout Plain Layout

			t0=g(b+a+1)+g(b+delta+a+1);          
\end_layout

\begin_layout Plain Layout

			t1=(w^b)*(g(b+a+1)-g(b+delta+a+1));          
\end_layout

\begin_layout Plain Layout

			g(b+a+1)=t0;          
\end_layout

\begin_layout Plain Layout

			g(b+delta+a+1)=t1;         
\end_layout

\begin_layout Plain Layout

		end      
\end_layout

\begin_layout Plain Layout

	end       
\end_layout

\begin_layout Plain Layout

delta=delta/2;   
\end_layout

\begin_layout Plain Layout

end 
\end_layout

\end_inset

Para la inversa se le pasa la matriz previamente procesada por la función
 "ifft2_dit" y se empieza enviando las filas de la matriz a la función "ifft",
 la cual le aplica la inversa de la FFT multiplicando el vector por una
 exponencial compleja positiva y multiplicándola por 
\begin_inset Formula $\frac{1}{N}$
\end_inset

 donde N es el tamo del vector y se aplica el algoritmo de ordenamiento
 de inversión de bits.
 Después de terminar con las filas empieza a enviar por columnas a la función
 "idft" y se aplica el algoritmo de ordenamiento de inversión de bits; Así
 Hasta terminar con la inversa y regresar la imagen original.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small},breaklines=true,language=Matlab,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

function img=fft2_dit(img)     
\end_layout

\begin_layout Plain Layout

[Y,X]=size(img);
\end_layout

\begin_layout Plain Layout

N1=X/2;     
\end_layout

\begin_layout Plain Layout

N2=Y/2;     
\end_layout

\begin_layout Plain Layout

W=1j*2*pi;     
\end_layout

\begin_layout Plain Layout

for x=1:Y         
\end_layout

\begin_layout Plain Layout

	img(x,:)=img(x,:).*exp(((W.*(((1:X).*N1)/X+(x*N2/Y)))));   
\end_layout

\begin_layout Plain Layout

end         
\end_layout

\begin_layout Plain Layout

img=img.';                              
\end_layout

\begin_layout Plain Layout

for x=1:X      
\end_layout

\begin_layout Plain Layout

	img(x,:)=fft_dit(img(x,:));            
\end_layout

\begin_layout Plain Layout

	img(x,:)=bitreversal(img(x,:));     
\end_layout

\begin_layout Plain Layout

end     
\end_layout

\begin_layout Plain Layout

img=img.';                              
\end_layout

\begin_layout Plain Layout

for x=1:Y        
\end_layout

\begin_layout Plain Layout

	img(x,:)=fft_dit(img(x,:));         
\end_layout

\begin_layout Plain Layout

	img(x,:)=bitreversal(img(x,:));     
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Ordenamiento de inversión de bits.
 En el caso de diezmado en el tiempo, la secuencia de entrada debe ser re
 ordenada mientras que la salida aparece en el orden correcto.
 Por otro lado el diezmado en frecuencia, la secuencia está en orden mientras
 que la salida habrá que re ordenarla.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function img=bitreversal(img) 
\end_layout

\begin_layout Plain Layout

N=length(img); 
\end_layout

\begin_layout Plain Layout

b=1; 
\end_layout

\begin_layout Plain Layout

N2=N/2; 
\end_layout

\begin_layout Plain Layout

for a=2:N     
\end_layout

\begin_layout Plain Layout

	N1=N2;     
\end_layout

\begin_layout Plain Layout

	while (b>N1)         
\end_layout

\begin_layout Plain Layout

		b=b-N1;         
\end_layout

\begin_layout Plain Layout

		N1=N1/2;     
\end_layout

\begin_layout Plain Layout

	end     
\end_layout

\begin_layout Plain Layout

	b=b+N1;     
\end_layout

\begin_layout Plain Layout

	if a<b         
\end_layout

\begin_layout Plain Layout

		t1=img(a);         
\end_layout

\begin_layout Plain Layout

		img(a)=img(b);         
\end_layout

\begin_layout Plain Layout

		img(b)=t1;     
\end_layout

\begin_layout Plain Layout

	end 
\end_layout

\begin_layout Plain Layout

end 
\end_layout

\end_inset

Se obtiene el rango dinámico del espectro de Fourier, se le quita el padding
 para mostar la inversa y se muestra el resultado final
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

     
\end_layout

\begin_layout Plain Layout

m_fft2=(log(1+abs(m_fft2))); 
\end_layout

\begin_layout Plain Layout

ifft2=abs(ifft2((1:Y),(1:X)));                   
\end_layout

\begin_layout Plain Layout

figure('Name','Practica 4');         
\end_layout

\begin_layout Plain Layout

subplot(2,2,1:2); 
\end_layout

\begin_layout Plain Layout

imshow(Isalida,[]); 
\end_layout

\begin_layout Plain Layout

title('Imagen original')         
\end_layout

\begin_layout Plain Layout

subplot(2,2,3); 
\end_layout

\begin_layout Plain Layout

imshow(m_fft2,[]); 
\end_layout

\begin_layout Plain Layout

title('Espectro de frecuencias de la FFT')          
\end_layout

\begin_layout Plain Layout

subplot(2,2,4); imshow(ifft2,[]); 
\end_layout

\begin_layout Plain Layout

title('Inversa de la FFT')                   
\end_layout

\begin_layout Plain Layout

fclose(i1);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Captura de pantalla 2013-10-07 a la(s) 19.23.56.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Ejemplo de aplicación de algoritmo de FFT 2D.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Resultados.
\end_layout

\begin_layout Standard
En esta practica se vio la implementación de los métodos de DFT y FFT para
 el procesamiento de imágenes, mostrando sus espectros de frecuencias, a
 las cuales se les evaluó para determinar el rendimiento de ambas y poder
 apreciar el comportamiento de ambas, a continuación se muestran los resultados
 obtenidos.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Captura de pantalla 2013-10-07 a la(s) 19.23.17.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Aplicando la DFT y la FFT
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A continuación se muestran los tiempos de cada uno de los algoritmos.
 Donde se aprecia claramente que la FFT tiene mejor tiempo de procesamiento
 en comparación a la DFT.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename f_cinco.PNG
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Comparación en tiempos de la DFT y la FFT
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

Wilfrido Gómez Flores---------Clase05a_PDI_2013.pdf
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

Wilfrido Gómez Flores---------Clase05b_PDI_2013.pdf
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

http://www.ceduvirt.com/resources/Dsp1%20Fourier.pdf
\end_layout

\end_body
\end_document
